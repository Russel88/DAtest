% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DA.ltt.R
\name{DA.ltt}
\alias{DA.ltt}
\title{Welch t-test}
\usage{
DA.ltt(
  data,
  predictor,
  paired = NULL,
  relative = TRUE,
  p.adj = "fdr",
  delta = 1,
  testStat = function(case, control) {     log2((mean(case) + 0.001)/(mean(control) +
    0.001)) },
  testStat.pair = function(case, control) {     log2(mean((case + 0.001)/(control +
    0.001))) },
  allResults = FALSE,
  ...
)
}
\arguments{
\item{data}{Either a matrix with counts/abundances, OR a \code{phyloseq} object. If a matrix/data.frame is provided rows should be taxa/genes/proteins and columns samples}

\item{predictor}{The predictor of interest. Factor, OR if \code{data} is a \code{phyloseq} object the name of the variable in \code{sample_data(data)} in quotation}

\item{paired}{For paired/blocked experimental designs. Either a Factor with Subject/Block ID for running paired/blocked analysis, OR if \code{data} is a \code{phyloseq} object the name of the variable in \code{sample_data(data)} in quotation}

\item{relative}{Logical. Should \code{data} be normalized to relative abundances. Default TRUE}

\item{p.adj}{Character. P-value adjustment. Default "fdr". See \code{p.adjust} for details}

\item{delta}{Numeric. Pseudocount for log transformation.}

\item{testStat}{Function. Function for calculating fold change. Should take two vectors as arguments. Default is a log fold change: \code{log2((mean(case abundances)+0.001)/(mean(control abundances)+0.001))}}

\item{testStat.pair}{Function. Function for calculating fold change. Should take two vectors as arguments. Default is a log fold change: \code{log2(mean((case abundances+0.001)/(control abundances+0.001)))}}

\item{allResults}{If TRUE will return raw results from the \code{t.test} function}

\item{...}{Additional arguments for the \code{t.test} function}
}
\value{
A data.frame with with results.
}
\description{
Apply welch t-test to multiple features with one \code{predictor}, with log transformaiton of counts before normalization
}
\examples{
# Creating random count_table and predictor
set.seed(4)
mat <- matrix(rnbinom(1000, size = 0.1, mu = 500), nrow = 100, ncol = 10)
rownames(mat) <- 1:100
pred <- c(rep("Control", 5), rep("Treatment", 5))

# Running t-test on each feature
res <- DA.ltt(data = mat, predictor = pred)
}
